import React, { useState } from "react";
import { 
  View, Text, StyleSheet, TouchableOpacity, Image, Alert, Modal, ScrollView 
} from "react-native";
import * as ImagePicker from "expo-image-picker";
import { useRouter } from "expo-router";

import AppHeader from "./components/AppHeader";
import Button from "./components/Button";
import InputField from "./components/InputField";

export default function ProfileScreen() {
  const router = useRouter();

  // State avatar
  const [avatarUri, setAvatarUri] = useState<string | null>(null);

  // Modal v√† state form
  const [modalVisible, setModalVisible] = useState(false);
  const [currentForm, setCurrentForm] = useState<null | "info" | "password" | "upgrade" | "privacy">(null);

  // Th√¥ng tin c√° nh√¢n m·∫´u
  const [name, setName] = useState("Nguy·ªÖn VƒÉn An");
  const [email, setEmail] = useState("nguyenvanan@email.com");
  const [phone, setPhone] = useState("0123456789");

  // M·∫≠t kh·∫©u
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  // H√†m ch·ªçn ·∫£nh avatar
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 0.7,
    });
    if (!result.canceled && result.assets?.length) {
      setAvatarUri(result.assets[0].uri);
    }
  };

  // X·ª≠ l√Ω m·ªü form t∆∞∆°ng ·ª©ng
  const openForm = (formName: typeof currentForm) => {
    setCurrentForm(formName);
    setModalVisible(true);
  };

  // ƒê√≥ng modal
  const closeForm = () => {
    setModalVisible(false);
    setCurrentForm(null);
  };

  // X√°c nh·∫≠n ƒëƒÉng xu·∫•t
  const handleLogout = () => {
    Alert.alert("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?", [
      { text: "Hu·ª∑", style: "cancel" },
      { text: "ƒêƒÉng xu·∫•t", style: "destructive", onPress: () => router.replace("/login") }
    ]);
  };

  // Form n·ªôi dung theo lo·∫°i
  const renderFormContent = () => {
    switch(currentForm) {
      case "info":
        return (
          <>
            <Text style={styles.modalTitle}>C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n</Text>
            <InputField label="T√™n" value={name} onChangeText={setName} />
            <InputField label="Email" value={email} onChangeText={setEmail} />
            <InputField label="S·ªë ƒëi·ªán tho·∫°i" value={phone} onChangeText={setPhone} keyboardType="phone-pad" />
            <Button title="L∆∞u" onPress={() => { closeForm(); /* Th√™m logic l∆∞u info */ }} />
          </>
        );
      case "password":
        return (
          <>
            <Text style={styles.modalTitle}>ƒê·ªïi m·∫≠t kh·∫©u</Text>
            <InputField label="M·∫≠t kh·∫©u c≈©" value={oldPassword} onChangeText={setOldPassword} secureTextEntry />
            <InputField label="M·∫≠t kh·∫©u m·ªõi" value={newPassword} onChangeText={setNewPassword} secureTextEntry />
            <InputField label="X√°c nh·∫≠n m·∫≠t kh·∫©u" value={confirmPassword} onChangeText={setConfirmPassword} secureTextEntry />
            <Button title="L∆∞u" onPress={() => { 
              if (newPassword !== confirmPassword) {
                Alert.alert("L·ªói", "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp");
                return;
              }
              closeForm(); 
              // Th√™m logic l∆∞u m·∫≠t kh·∫©u
            }} />
          </>
        );
      case "upgrade":
        return (
          <>
            <Text style={styles.modalTitle}>N√¢ng c·∫•p t√†i kho·∫£n</Text>
         
            <Button title="N√¢ng c·∫•p" onPress={() => { closeForm(); router.push("/upgrade-package"); }} />///upgrade-package
          </>
        );
      case "privacy":
        return (
          <>
            <Text style={styles.modalTitle}>Quy·ªÅn ri√™ng t∆∞</Text>
            <Text>Th√™m c√°c t√πy ch·ªçn c√†i ƒë·∫∑t b·∫£o m·∫≠t, quy·ªÅn ri√™ng t∆∞ ·ªü ƒë√¢y</Text>
            <Button title="ƒê√≥ng" onPress={closeForm} />
          </>
        );
      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      <AppHeader 
        title="Th√¥ng tin c√° nh√¢n"
        showBackButton
        onBackPress={() => router.back()}
      />

      <ScrollView contentContainerStyle={styles.content}>
        <View style={styles.avatarContainer}>
          <View style={styles.avatarBox}>
            {avatarUri ? (
              <Image source={{ uri: avatarUri }} style={styles.avatar} />
            ) : (
              <View style={styles.defaultAvatar}>
                <Text style={{ fontSize: 48, color: "#999" }}>üë§</Text>
              </View>
            )}
            <TouchableOpacity style={styles.cameraButton} onPress={pickImage}>
              <Text style={{ color: "#fff", fontWeight: "700" }}>üì∑</Text>
            </TouchableOpacity>
          </View>
          <Text style={styles.name}>{name}</Text>
          <Text style={styles.email}>{email}</Text>
        </View>

        <TouchableOpacity style={styles.menuItem} onPress={() => openForm("info")}>
          <Text style={styles.menuTitle}>C·∫≠p nh·∫≠t th√¥ng tin</Text>
          <Text style={styles.menuDesc}>Ch·ªânh s·ª≠a t√™n, email, s·ªë ƒëi·ªán tho·∫°i</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.menuItem} onPress={() => openForm("password")}>
          <Text style={styles.menuTitle}>Thay ƒë·ªïi m·∫≠t kh·∫©u</Text>
          <Text style={styles.menuDesc}>C·∫≠p nh·∫≠t m·∫≠t kh·∫©u b·∫£o m·∫≠t</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.menuItem} onPress={() => openForm("upgrade")}>
          <Text style={styles.menuTitle}>N√¢ng c·∫•p t√†i kho·∫£n</Text>
          <Text style={styles.menuDesc}>M·ªü kh√≥a t√≠nh nƒÉng Premium</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.menuItem} onPress={() => openForm("privacy")}>
          <Text style={styles.menuTitle}>Quy·ªÅn ri√™ng t∆∞</Text>
          <Text style={styles.menuDesc}>C√†i ƒë·∫∑t b·∫£o m·∫≠t v√† ri√™ng t∆∞</Text>
        </TouchableOpacity>

        <Button 
          title="ƒêƒÉng xu·∫•t" 
          variant="secondary" 
          style={{ marginTop: 40 }} 
          onPress={handleLogout} 
        />
      </ScrollView>

      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={closeForm}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <ScrollView>{renderFormContent()}</ScrollView>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff" },
  content: { padding: 20 },
  avatarContainer: { alignItems: "center", marginBottom: 30 },
  avatarBox: {
    position: "relative",
    width: 120,
    height: 120,
    borderRadius: 20,
    backgroundColor: "#ddd",
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 12,
  },
  avatar: { width: 120, height: 120, borderRadius: 20, resizeMode: "cover" },
  defaultAvatar: {
    width: 120,
    height: 120,
    borderRadius: 20,
    backgroundColor: "#ccc",
    justifyContent: "center",
    alignItems: "center",
  },
  cameraButton: {
    position: "absolute",
    right: 0,
    bottom: 0,
    backgroundColor: "#4b44f6",
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: "#fff",
  },
  name: {
    fontWeight: "700",
    fontSize: 20,
  },
  email: {
    fontWeight: "400",
    fontSize: 14,
    color: "#666",
  },
  menuItem: {
    padding: 16,
    borderWidth: 1,
    borderColor: "#eee",
    borderRadius: 12,
    marginBottom: 16,
    backgroundColor: "#fafafa",
  },
  menuTitle: {
    fontWeight: "600",
    fontSize: 16,
  },
  menuDesc: {
    fontWeight: "400",
    fontSize: 13,
    color: "#666",
    marginTop: 4,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.3)",
    justifyContent: "center",
    padding: 20,
  },
  modalContent: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    maxHeight: "80%",
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "700",
    marginBottom: 16,
  },
});
